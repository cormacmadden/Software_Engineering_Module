var d3 = require('d3'); 
const btnRepos = document.getElementById("btnRepos");

const divResult = document.getElementById("divResult");
//     btnRepos.addEventListener("click", getNames);
getNames();
var data = new Array();

function Object(date, name, commits) {
  this.date = date;
  this.name = name;
  this.value = commits;
}

var years = new Array();
years = [
  "2014-01-01",
  "2015-01-01",
  "2016-01-01",
  "2017-01-01",
  "2018-01-01",
  "2019-01-01",
  "2020-01-01",
  "2021-01-01",
];

// Get the general data for the repo

async function getRepo() {
  clear();
  const Tempurl =
    "https://api.github.com/search/repositories?q=stars:150000..300000";
  const url = "https://api.github.com/repos/freecodecamp/freecodecamp";
  const url2 = "https://api.github.com/repos/freecodecamp/freecodecamp";

  const response = await fetch(url);
  const result = await response.json();

  const name = result.name;
  divResult.append(name);
}

// Get the Names
async function getNames() {
  clear();

  //const url3 = "https://api.github.com/repos/freecodecamp/freecodecamp/contributors";
  const url4 =
    "https://api.github.com/repos/freecodecamp/freecodecamp/stats/contributors";

  const response = await fetch(url4);
  const result = await response.json();

  asyncForEach(result, async (author) => {
    var i;
    var year = 0;
    var count = 0;
    var object;

    for (i = 0; i < author.weeks.length; i++) {
      count += author.weeks[i].c;
      if (i % 52 == 0) {
        var object = new Object(years[year], author.author.login, count);
        data.push(object);
        year++;
      }
    }
  });
}
data.forEach(element => {
  d3.select("body")
  .append(<div>data.count</div>)
});


function clear() {
  while (divResult.firstChild)
    divResult.removeChild(divResult.firstChild);
}

async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array);
  }
}

function rollup(values, reduce, ...keys) {
    return nest(values, identity, reduce, keys);
  }

function rollups(values, reduce, ...keys) {
return nest(values, Array.from, reduce, keys);
}
  margin = { top: 16, right: 6, bottom: 6, left: 0 };
  width = 1000;
  barSize = 48;
  n = 12;
  x = d3.scaleLinear([0, 1], [margin.left, width - margin.right]);
  y = d3
    .scaleBand()
    .domain(d3.range(n + 1))
    .rangeRound([margin.top, margin.top + barSize * (n + 1 + 0.1)])
    .padding(0.1);
  height = margin.top + barSize * n + margin.bottom;
  k = 10;
  var keyframes = [];
  Array.prototype.flatMap = function (d3, datevalues, k, rank) {
    const keyframes = [];
    let ka, a, kb, b;
    datevalues = Array.from(
  //  d3.rollup(data,([d]) => d.value,(d) => +d.date,(d) => d.name)
  )
    .map(([date, data]) => [new Date(date), data])
    .sort(([a], [b]) => d3.ascending(a, b));
    console.log(datevalues)

    for ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {
      for (let i = 0; i < k; ++i) {
        const t = i / k;
        keyframes.push([
          new Date(ka * (1 - t) + kb * t),
          rank(
            (name) => (a.get(name) || 0) * (1 - t) + (b.get(name) || 0) * t
          ),
        ]);
      }
    }
    keyframes.push([new Date(kb), rank((name) => b.get(name) || 0)]);
    return keyframes;
  };

  nameframes = d3.groups(
    keyframes.flatMap(([, data]) => data),
    (d) => d.name
  );
  prev = new Map(
    nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a]))
  );
  next = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)));

  chart();
  async function chart() {
    const svg = d3.create("svg").attr("viewBox", [0, 0, width, height]);

    const updateBars = bars(svg);
    const updateAxis = axis(svg);
    const updateLabels = labels(svg);
    const updateTicker = ticker(svg);

    yield = svg.node();

    for (const keyframe of keyframes) {
      const transition = svg
        .transition()
        .duration(duration)
        .ease(d3.easeLinear);

      // Extract the top barâ€™s value.
      x.domain([0, keyframe[1][0].value]);

      updateAxis(keyframe, transition);
      updateBars(keyframe, transition);
      updateLabels(keyframe, transition);
      updateTicker(keyframe, transition);

      invalidation.then(() => svg.interrupt());
      await transition.end();
    }
  }

  function bars(svg) {
    let bar = svg.append("g").attr("fill-opacity", 0.6).selectAll("rect");

    return ([date, data], transition) =>
      (bar = bar
        .data(data.slice(0, n), (d) => d.name)
        .join(
          (enter) =>
            enter
              .append("rect")
              .attr("fill", color)
              .attr("height", y.bandwidth())
              .attr("x", x(0))
              .attr("y", (d) => y((prev.get(d) || d).rank))
              .attr("width", (d) => x((prev.get(d) || d).value) - x(0)),
          (update) => update,
          (exit) =>
            exit
              .transition(transition)
              .remove()
              .attr("y", (d) => y((next.get(d) || d).rank))
              .attr("width", (d) => x((next.get(d) || d).value) - x(0))
        )
        .call((bar) =>
          bar
            .transition(transition)
            .attr("y", (d) => y(d.rank))
            .attr("width", (d) => x(d.value) - x(0))
        ));
  }

  function formatDate(date) {
    return d3.utcFormat(date);
  }

  function axis(svg) {
    const g = svg
      .append("g")
      .attr("transform", `translate(0,${margin.top})`);

    const axis = d3
      .axisTop(x)
      .ticks(width / 160)
      .tickSizeOuter(0)
      .tickSizeInner(-barSize * (n + y.padding()));

    return (_, transition) => {
      g.transition(transition).call(axis);
      g.select(".tick:first-of-type text").remove();
      g.selectAll(".tick:not(:first-of-type) line").attr("stroke", "white");
      g.select(".domain").remove();
    };
  }

  function ticker(svg) {
    const now = svg
      .append("text")
      .style("font", `bold ${barSize}px var(--sans-serif)`)
      .style("font-variant-numeric", "tabular-nums")
      .attr("text-anchor", "end")
      .attr("x", width - 6)
      .attr("y", margin.top + barSize * (n - 0.45))
      .attr("dy", "0.32em")
      .text(formatDate(keyframes[0][0]));

    return ([date], transition) => {
      transition.end().then(() => now.text(formatDate(date)));
    };
  }

  function labels(svg) {
    let label = svg
      .append("g")
      .style("font", "bold 12px var(--sans-serif)")
      .style("font-variant-numeric", "tabular-nums")
      .attr("text-anchor", "end")
      .selectAll("text");

    return ([date, data], transition) =>
      (label = label
        .data(data.slice(0, n), (d) => d.name)
        .join(
          (enter) =>
            enter
              .append("text")
              .attr(
                "transform",
                (d) =>
                  `translate(${x((prev.get(d) || d).value)},${y(
                    (prev.get(d) || d).rank
                  )})`
              )
              .attr("y", y.bandwidth() / 2)
              .attr("x", -6)
              .attr("dy", "-0.25em")
              .text((d) => d.name)
              .call((text) =>
                text
                  .append("tspan")
                  .attr("fill-opacity", 0.7)
                  .attr("font-weight", "normal")
                  .attr("x", -6)
                  .attr("dy", "1.15em")
              ),
          (update) => update,
          (exit) =>
            exit
              .transition(transition)
              .remove()
              .attr(
                "transform",
                (d) =>
                  `translate(${x((next.get(d) || d).value)},${y(
                    (next.get(d) || d).rank
                  )})`
              )
              .call((g) =>
                g
                  .select("tspan")
                  .tween("text", (d) =>
                    textTween(d.value, (next.get(d) || d).value)
                  )
              )
        )
        .call((bar) =>
          bar
            .transition(transition)
            .attr(
              "transform",
              (d) => `translate(${x(d.value)},${y(d.rank)})`
            )
            .call((g) =>
              g
                .select("tspan")
                .tween("text", (d) =>
                  textTween((prev.get(d) || d).value, d.value)
                )
            )
        ));
  }

  function textTween(a, b) {
    const i = d3.interpolateNumber(a, b);
    return function (t) {
      this.textContent = formatNumber(i(t));
    };
  }

  function rank(value) {
    const data = Array.from(names, (name) => ({
      name,
      value: value(name),
    }));
    data.sort((a, b) => d3.descending(a.value, b.value));
    for (let i = 0; i < data.length; ++i) data[i].rank = Math.min(n, i);
    return data;
  }